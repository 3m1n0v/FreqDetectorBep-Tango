/*----- PROTECTED REGION ID(FreqDetectorBepStateMachine.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        FreqDetectorBepStateMachine.cpp
//
// description : State machine file for the FreqDetectorBep class
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include <FreqDetectorBep.h>

/*----- PROTECTED REGION END -----*/	//	FreqDetectorBep::FreqDetectorBepStateMachine.cpp

//================================================================
//  States   |  Description
//================================================================
//  ON       |  Device online.
//  FAULT    |  A critical error has occurred. Further Device work is impossible.
//  UNKNOWN  |  Device is not responding.
//  INIT     |  This state is set only during initialization.


namespace FreqDetectorBep_ns
{
//=================================================
//		Attributes Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : FreqDetectorBep::is_freq_allowed()
 *	Description : Execution allowed for freq attribute
 */
//--------------------------------------------------------
bool FreqDetectorBep::is_freq_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Not any excluded states for freq attribute in Write access.
	/*----- PROTECTED REGION ID(FreqDetectorBep::freqStateAllowed_WRITE) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	FreqDetectorBep::freqStateAllowed_WRITE

	//	Not any excluded states for freq attribute in read access.
	/*----- PROTECTED REGION ID(FreqDetectorBep::freqStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	FreqDetectorBep::freqStateAllowed_READ
	return true;
}


//=================================================
//		Commands Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : FreqDetectorBep::is_OnTimer_allowed()
 *	Description : Execution allowed for OnTimer attribute
 */
//--------------------------------------------------------
bool FreqDetectorBep::is_OnTimer_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for OnTimer command.
	/*----- PROTECTED REGION ID(FreqDetectorBep::OnTimerStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	FreqDetectorBep::OnTimerStateAllowed
	return true;
}


/*----- PROTECTED REGION ID(FreqDetectorBep::FreqDetectorBepStateAllowed.AdditionalMethods) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	FreqDetectorBep::FreqDetectorBepStateAllowed.AdditionalMethods

}	//	End of namespace
